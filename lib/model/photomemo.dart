class PhotoMemo {
  String docID; //firebase autogenerated ID
  String createdBy;
  String title;
  String memo;
  String photoFilename; //stored at storagte of firebase //nontext database
  String photoURL;
  DateTime timestamp;
  List<dynamic>
      sharedWith; // list of emails //dynamic must be used to be compatible with firestore
  List<dynamic> imageLabels; // image identified by machine learning

  //key for firestore documents
  static const TITLE = 'title';
  static const MEMO = 'memo';
  static const CREATED_BY = 'createdBy';
  static const PHOTO_URL = 'photoURL';
  static const PHOTO_FILENAME = 'photoFilename';
  static const TIMESTAMP = 'timestamp';
  static const SHARED_WITH = 'sharedWith';
  static const IMAGE_LABELS = 'imageLabels';

  PhotoMemo({
    //constructor
    //params
    this.docID,
    this.createdBy,
    this.memo,
    this.photoFilename,
    this.photoURL,
    this.timestamp,
    this.title,
    this.sharedWith,
    this.imageLabels,
  }) {
    //logic
    this.sharedWith ??= []; //if null start with empty list
    this.imageLabels ??= []; //if null start with empty list
  }

  PhotoMemo.clone(PhotoMemo p) {
    // deep copy
    this.docID = p.docID;
    this.createdBy = p.createdBy;
    this.memo = p.memo;
    this.photoFilename = p.photoFilename;
    this.photoURL = p.photoURL;
    this.timestamp = p.timestamp;
    this.title = p.title;
    this.sharedWith =
        []; //must create a new list and add all element by element in order to make deep copy of a list, otherwise, it just references the original list
    this.sharedWith.addAll(p.sharedWith);
    this.imageLabels = [];
    this.imageLabels.addAll(p.imageLabels);
  }

  void assign(PhotoMemo p) {
    // for setting this to the same values as our clone
    this.docID = p.docID;
    this.createdBy = p.docID;
    this.memo = p.memo;
    this.photoFilename = p.photoFilename;
    this.photoURL = p.photoURL;
    this.title = p.title;
    this.timestamp = p.timestamp;
    this.sharedWith.clear();
    this.sharedWith.addAll(p.sharedWith);
    this.imageLabels.clear();
    this.imageLabels.addAll(p.imageLabels);
  }

  // converts instance of class type into firebase type (dart object to firestore document)
  Map<String, dynamic> serialize() {
    //firestore can easy store maps
    return <String, dynamic>{
      TITLE: this.title,
      CREATED_BY: this.createdBy,
      MEMO: this.memo,
      PHOTO_FILENAME: this.photoFilename,
      PHOTO_URL: this.photoURL,
      TIMESTAMP: this.timestamp,
      SHARED_WITH: this.sharedWith,
      IMAGE_LABELS: this.imageLabels,
    }; //strinkg key, dynamic type
  }

  static PhotoMemo deserialize(Map<String, dynamic> doc, String docId) {
    return PhotoMemo(
      docID: docId,
      createdBy: doc[CREATED_BY],
      title: doc[TITLE],
      memo: doc[MEMO],
      photoFilename: doc[PHOTO_FILENAME],
      photoURL: doc[PHOTO_URL],
      sharedWith: doc[SHARED_WITH],
      imageLabels: doc[IMAGE_LABELS],
      timestamp: doc[TIMESTAMP] == null
          ? null
          : //if null assign null
          DateTime.fromMicrosecondsSinceEpoch(doc[TIMESTAMP]
              .millisecondsSinceEpoch), //convert firebase datetime to dart datetime
    );
  }

  static String validateTitle(String value) {
    if (value == null || value.length < 3)
      return 'too short';
    else
      return null;
  }

  static String validateMemo(String value) {
    if (value == null || value.length < 5)
      return 'too short';
    else
      return null;
  }

  static String validateSharedWith(String value) {
    if (value == null || value.trim().length == 0)
      return null; //trim removes leading and trailing blanks
    List<String> emailList = value
        .split(RegExp('(,| )+'))
        .map((e) => e.trim())
        .toList(); //splits by commas or blanks //plus means one or more of these, either comma or blank
    //then we put into map, then we trim blank spaces out of the map, then we add it to a list
    for (String email in emailList) {
      if (email.contains('@') && email.contains('.'))
        continue;
      else
        return 'Comma(,) or space separated email list';
    }
    return null; //if we reach there then theres no errors
  }
}
